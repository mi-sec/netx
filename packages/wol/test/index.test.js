/** ****************************************************************************************************
 * File: index.test.js
 * Project: mi-sec-net
 * @author MI-SEC
 *******************************************************************************************************/
'use strict';

import chai from 'chai';

const { expect } = chai;

import { createMagicPacket } from '../index.js';
import wakeOnLan             from '../index.js';

describe( `${ process.env.npm_package_name } v${ process.env.npm_package_version }`, function() {
	it( 'createMagicPacket should create a magic packet (0-mac)', () => {
		expect( createMagicPacket( '00:00:00:00:00:00' ) )
			.to.deep.equal( Buffer.from( [
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00
		] ) );
	} );

	it( 'createMagicPacket should create a magic packet', () => {
		expect( createMagicPacket( 'AB:CD:EF:12:34:56' ) )
			.to.deep.equal( Buffer.from( [
			0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56,
			0xAB, 0xCD, 0xEF, 0x12, 0x34, 0x56
		] ) );
	} );

	it( 'wakeOnLan should send a UDP packet', async () => {
		expect( await wakeOnLan( '00:00:00:00:00:00' ) )
			.to.deep.equal( {
			status: 'sent',
			mac: '00:00:00:00:00:00',
			address: '255.255.255.255',
			packets: 3,
			interval: 100,
			port: 9
		} );
	} );
} );
